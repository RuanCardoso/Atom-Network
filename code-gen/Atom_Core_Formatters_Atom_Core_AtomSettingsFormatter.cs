// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace Atom.Core.Formatters.Atom.Core
{
    public sealed class AtomSettingsFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Atom.Core.AtomSettings>
    {
        // Addresses
        private static global::System.ReadOnlySpan<byte> GetSpan_Addresses() => new byte[1 + 9] { 169, 65, 100, 100, 114, 101, 115, 115, 101, 115 };
        // DebugMode
        private static global::System.ReadOnlySpan<byte> GetSpan_DebugMode() => new byte[1 + 9] { 169, 68, 101, 98, 117, 103, 77, 111, 100, 101 };
        // Encoding
        private static global::System.ReadOnlySpan<byte> GetSpan_Encoding() => new byte[1 + 8] { 168, 69, 110, 99, 111, 100, 105, 110, 103 };
        // MaxUdpPacketSize
        private static global::System.ReadOnlySpan<byte> GetSpan_MaxUdpPacketSize() => new byte[1 + 16] { 176, 77, 97, 120, 85, 100, 112, 80, 97, 99, 107, 101, 116, 83, 105, 122, 101 };
        // MaxPlayers
        private static global::System.ReadOnlySpan<byte> GetSpan_MaxPlayers() => new byte[1 + 10] { 170, 77, 97, 120, 80, 108, 97, 121, 101, 114, 115 };
        // MaxRecBuffer
        private static global::System.ReadOnlySpan<byte> GetSpan_MaxRecBuffer() => new byte[1 + 12] { 172, 77, 97, 120, 82, 101, 99, 66, 117, 102, 102, 101, 114 };
        // MaxSendBuffer
        private static global::System.ReadOnlySpan<byte> GetSpan_MaxSendBuffer() => new byte[1 + 13] { 173, 77, 97, 120, 83, 101, 110, 100, 66, 117, 102, 102, 101, 114 };
        // ReceiveTimeout
        private static global::System.ReadOnlySpan<byte> GetSpan_ReceiveTimeout() => new byte[1 + 14] { 174, 82, 101, 99, 101, 105, 118, 101, 84, 105, 109, 101, 111, 117, 116 };
        // SendTimeout
        private static global::System.ReadOnlySpan<byte> GetSpan_SendTimeout() => new byte[1 + 11] { 171, 83, 101, 110, 100, 84, 105, 109, 101, 111, 117, 116 };
        // MaxStreamPool
        private static global::System.ReadOnlySpan<byte> GetSpan_MaxStreamPool() => new byte[1 + 13] { 173, 77, 97, 120, 83, 116, 114, 101, 97, 109, 80, 111, 111, 108 };
        // BandwidthTimeout
        private static global::System.ReadOnlySpan<byte> GetSpan_BandwidthTimeout() => new byte[1 + 16] { 176, 66, 97, 110, 100, 119, 105, 100, 116, 104, 84, 105, 109, 101, 111, 117, 116 };
        // PingFrequency
        private static global::System.ReadOnlySpan<byte> GetSpan_PingFrequency() => new byte[1 + 13] { 173, 80, 105, 110, 103, 70, 114, 101, 113, 117, 101, 110, 99, 121 };
        // BandwidthCounter
        private static global::System.ReadOnlySpan<byte> GetSpan_BandwidthCounter() => new byte[1 + 16] { 176, 66, 97, 110, 100, 119, 105, 100, 116, 104, 67, 111, 117, 110, 116, 101, 114 };
        // IncrementalGc
        private static global::System.ReadOnlySpan<byte> GetSpan_IncrementalGc() => new byte[1 + 13] { 173, 73, 110, 99, 114, 101, 109, 101, 110, 116, 97, 108, 71, 99 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Atom.Core.AtomSettings value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(14);
            writer.WriteRaw(GetSpan_Addresses());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string[]>(formatterResolver).Serialize(ref writer, value.Addresses, options);
            writer.WriteRaw(GetSpan_DebugMode());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.DebugMode, options);
            writer.WriteRaw(GetSpan_Encoding());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Encoding, options);
            writer.WriteRaw(GetSpan_MaxUdpPacketSize());
            writer.Write(value.MaxUdpPacketSize);
            writer.WriteRaw(GetSpan_MaxPlayers());
            writer.Write(value.MaxPlayers);
            writer.WriteRaw(GetSpan_MaxRecBuffer());
            writer.Write(value.MaxRecBuffer);
            writer.WriteRaw(GetSpan_MaxSendBuffer());
            writer.Write(value.MaxSendBuffer);
            writer.WriteRaw(GetSpan_ReceiveTimeout());
            writer.Write(value.ReceiveTimeout);
            writer.WriteRaw(GetSpan_SendTimeout());
            writer.Write(value.SendTimeout);
            writer.WriteRaw(GetSpan_MaxStreamPool());
            writer.Write(value.MaxStreamPool);
            writer.WriteRaw(GetSpan_BandwidthTimeout());
            writer.Write(value.BandwidthTimeout);
            writer.WriteRaw(GetSpan_PingFrequency());
            writer.Write(value.PingFrequency);
            writer.WriteRaw(GetSpan_BandwidthCounter());
            writer.Write(value.BandwidthCounter);
            writer.WriteRaw(GetSpan_IncrementalGc());
            writer.Write(value.IncrementalGc);
        }

        public global::Atom.Core.AtomSettings Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Atom.Core.AtomSettings();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 9:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7310313499700520001UL:
                                if (stringKey[0] != 115) { goto FAIL; }

                                ____result.Addresses = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string[]>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 7237088232954029380UL:
                                if (stringKey[0] != 101) { goto FAIL; }

                                ____result.DebugMode = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7453010313431182917UL) { goto FAIL; }

                        ____result.Encoding = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 16:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7012228196048855373UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7312272752145427299UL) { goto FAIL; }

                                ____result.MaxUdpPacketSize = reader.ReadInt32();
                                continue;

                            case 8386944367577686338UL:
                                switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                                {
                                    default: goto FAIL;
                                    case 8391735962092786792UL:
                                        ____result.BandwidthTimeout = reader.ReadDouble();
                                        continue;
                                    case 8243122710737011560UL:
                                        ____result.BandwidthCounter = reader.ReadBoolean();
                                        continue;
                                }

                        }
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_MaxPlayers().Slice(1))) { goto FAIL; }

                        ____result.MaxPlayers = reader.ReadInt32();
                        continue;
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_MaxRecBuffer().Slice(1))) { goto FAIL; }

                        ____result.MaxRecBuffer = reader.ReadInt32();
                        continue;
                    case 13:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 4784070085645459789UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 491327481461UL) { goto FAIL; }

                                ____result.MaxSendBuffer = reader.ReadInt32();
                                continue;

                            case 7018141438268957005UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 465726034029UL) { goto FAIL; }

                                ____result.MaxStreamPool = reader.ReadInt32();
                                continue;

                            case 8171062745642199376UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 521359222133UL) { goto FAIL; }

                                ____result.PingFrequency = reader.ReadSingle();
                                continue;

                            case 7954884599298092617UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 426400047476UL) { goto FAIL; }

                                ____result.IncrementalGc = reader.ReadBoolean();
                                continue;

                        }
                    case 14:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ReceiveTimeout().Slice(1))) { goto FAIL; }

                        ____result.ReceiveTimeout = reader.ReadInt32();
                        continue;
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_SendTimeout().Slice(1))) { goto FAIL; }

                        ____result.SendTimeout = reader.ReadInt32();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
