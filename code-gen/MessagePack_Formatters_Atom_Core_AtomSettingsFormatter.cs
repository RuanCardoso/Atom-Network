// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Atom.Core
{
    public sealed class AtomSettingsFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Atom.Core.AtomSettings>
    {
        // debug_mode
        private static global::System.ReadOnlySpan<byte> GetSpan_DebugMode() => new byte[1 + 10] { 170, 100, 101, 98, 117, 103, 95, 109, 111, 100, 101 };
        // encoding
        private static global::System.ReadOnlySpan<byte> GetSpan_Encoding() => new byte[1 + 8] { 168, 101, 110, 99, 111, 100, 105, 110, 103 };
        // max_udp_packet_size
        private static global::System.ReadOnlySpan<byte> GetSpan_MaxUdpPacketSize() => new byte[1 + 19] { 179, 109, 97, 120, 95, 117, 100, 112, 95, 112, 97, 99, 107, 101, 116, 95, 115, 105, 122, 101 };
        // max_players
        private static global::System.ReadOnlySpan<byte> GetSpan_MaxPlayers() => new byte[1 + 11] { 171, 109, 97, 120, 95, 112, 108, 97, 121, 101, 114, 115 };
        // max_rec_buffer
        private static global::System.ReadOnlySpan<byte> GetSpan_MaxRecBuffer() => new byte[1 + 14] { 174, 109, 97, 120, 95, 114, 101, 99, 95, 98, 117, 102, 102, 101, 114 };
        // max_send_buffer
        private static global::System.ReadOnlySpan<byte> GetSpan_MaxSendBuffer() => new byte[1 + 15] { 175, 109, 97, 120, 95, 115, 101, 110, 100, 95, 98, 117, 102, 102, 101, 114 };
        // max_rec_timeout
        private static global::System.ReadOnlySpan<byte> GetSpan_ReceiveTimeout() => new byte[1 + 15] { 175, 109, 97, 120, 95, 114, 101, 99, 95, 116, 105, 109, 101, 111, 117, 116 };
        // max_send_timeout
        private static global::System.ReadOnlySpan<byte> GetSpan_SendTimeout() => new byte[1 + 16] { 176, 109, 97, 120, 95, 115, 101, 110, 100, 95, 116, 105, 109, 101, 111, 117, 116 };
        // max_stream_pool
        private static global::System.ReadOnlySpan<byte> GetSpan_MaxStreamPool() => new byte[1 + 15] { 175, 109, 97, 120, 95, 115, 116, 114, 101, 97, 109, 95, 112, 111, 111, 108 };
        // bandwidth_timeout
        private static global::System.ReadOnlySpan<byte> GetSpan_BandwidthTimeout() => new byte[1 + 17] { 177, 98, 97, 110, 100, 119, 105, 100, 116, 104, 95, 116, 105, 109, 101, 111, 117, 116 };
        // ping_frequency
        private static global::System.ReadOnlySpan<byte> GetSpan_PingFrequency() => new byte[1 + 14] { 174, 112, 105, 110, 103, 95, 102, 114, 101, 113, 117, 101, 110, 99, 121 };
        // bandwidth_counter
        private static global::System.ReadOnlySpan<byte> GetSpan_BandwidthCounter() => new byte[1 + 17] { 177, 98, 97, 110, 100, 119, 105, 100, 116, 104, 95, 99, 111, 117, 110, 116, 101, 114 };
        // incremental_gc
        private static global::System.ReadOnlySpan<byte> GetSpan_IncrementalGc() => new byte[1 + 14] { 174, 105, 110, 99, 114, 101, 109, 101, 110, 116, 97, 108, 95, 103, 99 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Atom.Core.AtomSettings value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(13);
            writer.WriteRaw(GetSpan_DebugMode());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.DebugMode, options);
            writer.WriteRaw(GetSpan_Encoding());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Encoding, options);
            writer.WriteRaw(GetSpan_MaxUdpPacketSize());
            writer.Write(value.MaxUdpPacketSize);
            writer.WriteRaw(GetSpan_MaxPlayers());
            writer.Write(value.MaxPlayers);
            writer.WriteRaw(GetSpan_MaxRecBuffer());
            writer.Write(value.MaxRecBuffer);
            writer.WriteRaw(GetSpan_MaxSendBuffer());
            writer.Write(value.MaxSendBuffer);
            writer.WriteRaw(GetSpan_ReceiveTimeout());
            writer.Write(value.ReceiveTimeout);
            writer.WriteRaw(GetSpan_SendTimeout());
            writer.Write(value.SendTimeout);
            writer.WriteRaw(GetSpan_MaxStreamPool());
            writer.Write(value.MaxStreamPool);
            writer.WriteRaw(GetSpan_BandwidthTimeout());
            writer.Write(value.BandwidthTimeout);
            writer.WriteRaw(GetSpan_PingFrequency());
            writer.Write(value.PingFrequency);
            writer.WriteRaw(GetSpan_BandwidthCounter());
            writer.Write(value.BandwidthCounter);
            writer.WriteRaw(GetSpan_IncrementalGc());
            writer.Write(value.IncrementalGc);
        }

        public global::Atom.Core.AtomSettings Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Atom.Core.AtomSettings();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_DebugMode().Slice(1))) { goto FAIL; }

                        ____result.DebugMode = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7453010313431182949UL) { goto FAIL; }

                        ____result.Encoding = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 19:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_MaxUdpPacketSize().Slice(1))) { goto FAIL; }

                        ____result.MaxUdpPacketSize = reader.ReadInt32();
                        continue;
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_MaxPlayers().Slice(1))) { goto FAIL; }

                        ____result.MaxPlayers = reader.ReadInt32();
                        continue;
                    case 14:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 6873448998199910765UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 125779835254114UL) { goto FAIL; }

                                ____result.MaxRecBuffer = reader.ReadInt32();
                                continue;

                            case 7310017705118951792UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 133467960866161UL) { goto FAIL; }

                                ____result.PingFrequency = reader.ReadSingle();
                                continue;

                            case 7954884599298092649UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 109295633719668UL) { goto FAIL; }

                                ____result.IncrementalGc = reader.ReadBoolean();
                                continue;

                        }
                    case 15:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7236833197428334957UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 32199637825053279UL) { goto FAIL; }

                                ____result.MaxSendBuffer = reader.ReadInt32();
                                continue;

                            case 6873448998199910765UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 32780218601924980UL) { goto FAIL; }

                                ____result.ReceiveTimeout = reader.ReadInt32();
                                continue;

                            case 7310033184047522157UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 30521821902105953UL) { goto FAIL; }

                                ____result.MaxStreamPool = reader.ReadInt32();
                                continue;

                        }
                    case 16:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_SendTimeout().Slice(1))) { goto FAIL; }

                        ____result.SendTimeout = reader.ReadInt32();
                        continue;
                    case 17:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 8386944367577686370UL:
                                switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                                {
                                    default: goto FAIL;
                                    case 8462093745447526248UL:
                                        if (stringKey[0] != 116) { goto FAIL; }

                                        ____result.BandwidthTimeout = reader.ReadDouble();
                                        continue;

                                    case 7310589545788170088UL:
                                        if (stringKey[0] != 114) { goto FAIL; }

                                        ____result.BandwidthCounter = reader.ReadBoolean();
                                        continue;

                                }

                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
